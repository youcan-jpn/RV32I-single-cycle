// initialize all registers
@0000 00000093  // li    ra,  0          # x1  = 0  # "li ra, 0" == "addi ra, x0, 0"
@0001 00000113  // li    sp,  0          # x2  = 0
@0002 00000193  // li    gp,  0          # x3  = 0
@0003 00000213  // li    tp,  0          # x4  = 0
@0004 00000293  // li    t0,  0          # x5  = 0
@0005 00000313  // li    t1,  0          # x6  = 0
@0006 00000393  // li    t2,  0          # x7  = 0
@0007 00000413  // li    s0,  0          # x8  = 0
@0008 00000493  // li    s1,  0          # x9  = 0
@0009 00000513  // li    a0,  0          # x10 = 0
@000a 00000593  // li    a1,  0          # x11 = 0
@000b 00000613  // li    a2,  0          # x12 = 0
@000c 00000693  // li    a3,  0          # x13 = 0
@000d 00000713  // li    a4,  0          # x14 = 0
@000e 00000793  // li    a5,  0          # x15 = 0
@000f 00000813  // li    a6,  0          # x16 = 0
@0010 00000893  // li    a7,  0          # x17 = 0
@0011 00000913  // li    s2,  0          # x18 = 0
@0012 00000993  // li    s3,  0          # x19 = 0
@0013 00000a13  // li    s4,  0          # x20 = 0
@0014 00000a93  // li    s5,  0          # x21 = 0
@0015 00000b13  // li    s6,  0          # x22 = 0
@0016 00000b93  // li    s7,  0          # x23 = 0
@0017 00000c13  // li    s8,  0          # x24 = 0
@0018 00000c93  // li    s9,  0          # x25 = 0
@0019 00000d13  // li    s10, 0          # x26 = 0
@001a 00000d93  // li    s11, 0          # x27 = 0
@001b 00000e13  // li    t3,  0          # x28 = 0
@001c 00000e93  // li    t4,  0          # x29 = 0
@001d 00000f13  // li    t5,  0          # x30 = 0  # STORE THIS VALUE IF FAIL
@001e 00100F93  // li    t6,  1          # x31 = 1  # STORE THIS VALUE IF PASS

@001f 00308093  // addi x1, x1,   3      # x1 = x1 + 3 =   3  (00000003)
@0020 00F10113  // addi x2, x2,  15      # x2 = x2 + 15 =  15 (0000000F)
@0021 FF018193  // addi x3, x3, -16      # x3 = x3 - 16 = -16 (FFFFFFF0)
@0022 FFF20213  // addi x4, x4, -1       # x4 = x4 - 1 = -1
@0023 00240413  // addi x8, x8, 2        # x8 = x8 + 2 = 2
@0024 01848493  // addi x9, x9, 24       # x9 = x9 + 24 = 24
@0025 00317E13  // andi x28, x2, 3       # x28 = x2 & 3 = 3
@0026 03C09A63  // bne  x1, x28, +52     # PC+52 if x1 !== x28
@0027 003142B3  // xor  x5, x2, x3       # x5 = x2 ^ x3 = FFFFFFFF = -1
@0028 02429663  // bne x5, x4,  +44      # PC+44 if x5 !== x4
@0029 0012B333  // sltu x6, x5, x1       # x6 = (u(x5) < u(x1)) = 0
@002a 03E31263  // bne x6, x30, +36      # PC+36 if x6 !== 0
@002b 00815133  // srl x2, x2, x8        # x2 = x2 >> x8(2) = 3
@002c 00111E63  // bne x2, x1, +28       # PC+28 if x2 !== x1
@002d 0FF38393  // addi x7, x7, 255      # x7 = x7 + 255 = 000000FF
@002e 0091D1B3  // srl x3, x3, x9        # x3 = x3 >>  x9(24) = 000000FF
@002f 00719863  // bne x3, x7, +16       # PC+16 if x3 !== x7
@0030 009191B3  // sll x3, x3, x9        # x3 = x3 <<  x9(24) = FF000000
@0031 4091D1B3  // sra x3, x3, x9        # x3 = x3 >>> x9(24) = FFFFFFFF
@0032 00518463  // beq x3, x5, +8        # PC+8 if x3 === x5

// FAIL
@0033 03E02023  // sw x30, 32(x0)        # [32] = 0

// PASS
@0034 03F02023  // sw x31, 32(x0)        # [32] = 1
