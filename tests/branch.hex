// initialize all registers
@0000 00000093  // li    ra,  0          # x1  = 0  # "li ra, 0" == "addi ra, x0, 0"
@0001 00000113  // li    sp,  0          # x2  = 0
@0002 00000193  // li    gp,  0          # x3  = 0
@0003 00000213  // li    tp,  0          # x4  = 0
@0004 00000293  // li    t0,  0          # x5  = 0
@0005 00000313  // li    t1,  0          # x6  = 0
@0006 00000393  // li    t2,  0          # x7  = 0
@0007 00000413  // li    s0,  0          # x8  = 0
@0008 00000493  // li    s1,  0          # x9  = 0
@0009 00000513  // li    a0,  0          # x10 = 0
@000a 00000593  // li    a1,  0          # x11 = 0
@000b 00000613  // li    a2,  0          # x12 = 0
@000c 00000693  // li    a3,  0          # x13 = 0
@000d 00000713  // li    a4,  0          # x14 = 0
@000e 00000793  // li    a5,  0          # x15 = 0
@000f 00000813  // li    a6,  0          # x16 = 0
@0010 00000893  // li    a7,  0          # x17 = 0
@0011 00000913  // li    s2,  0          # x18 = 0
@0012 00000993  // li    s3,  0          # x19 = 0
@0013 00000a13  // li    s4,  0          # x20 = 0
@0014 00000a93  // li    s5,  0          # x21 = 0
@0015 00000b13  // li    s6,  0          # x22 = 0
@0016 00000b93  // li    s7,  0          # x23 = 0
@0017 00000c13  // li    s8,  0          # x24 = 0
@0018 00000c93  // li    s9,  0          # x25 = 0
@0019 00000d13  // li    s10, 0          # x26 = 0
@001a 00000d93  // li    s11, 0          # x27 = 0
@001b 00000e13  // li    t3,  0          # x28 = 0
@001c 00000e93  // li    t4,  0          # x29 = 0
@001d 00000f13  // li    t5,  0          # x30 = 0  # STORE THIS VALUE IF FAIL
@001e 00100F93  // li    t6,  1          # x31 = 1  # STORE THIS VALUE IF PASS

@001f 00308093  // addi x1,  x1, 3       # x1 = x1 + 3 =   3       (00000003)
@0020 0FF10113  // addi x2,  x2, 255     # x2 = x2 + 255 = 255     (000000FF)
@0021 00E18193  // addi x3,  x3, 14      # x3 = x3 + 14 =  14
@0022 00C20213  // addi x4,  x4, 12      # x4 = x4 + 12 =  12
@0023 FDC28293  // addi x5,  x5, -36     # x5 = x5 - 36 = -36
@0024 0020C463  // blt  x1,  x2, +8      # skip next if x1 < x2
@0025 0300056F  // jal  x10, +48         # jump to FAIL
@0026 0050D463  // bge  x1,  x5, +8      # skip next if x1 > x5
@0027 0280056F  // jal  x10, +40         # jump to FAIL
@0028 00516463  // bltu x2,  x5, +8      # u(x2) = 000000FF < FFFFFFDC = u(x5)
@0029 0200056F  // jal  x10, +32         # jump to FAIL
@002a 0032F463  // bgeu x5,  x3, +8      # skip next if x5 >= x3
@002b 0180056F  // jal  x10, +28         # jump to FAIL
@002c 0011CA63  // blt  x3,  x1, +20     # jump to FAIL if x3 < x1
@002d 0042D863  // bge  x5,  x4, +16     # jump to FAIL if x5 >= x4
@002e 0042E663  // bltu x5,  x4, +12     # jump to FAIL if u(x5) < u(x4)
@002f 00517463  // bgeu x2,  x5, +8      # jump to FAIL if u(x2) >= u(x5)
// @0030 00800567  // jalr x10, x0, +8      # jump to PASS : this doesn't work
// @0030 00508567  // jalr x10, x1, 5       # jump to PASS (x1 + 5 = +8) : this doesn't work
@0030 0080056F  // jal x10, +8


// FAIL
// @0031 00302023  // temp
@0031 03E02023  // sw x30, 32(x0)        # [32] = 0

// PASS
@0032 03F02023  // sw x31, 32(x0)        # [32] = 1
